#include <stdio.h>
#include <math.h>

// ---------------------------------------------------------------
// Model parameters (weights/biases exported from Keras)
// ---------------------------------------------------------------
// Conv2D 4 filters (3x3x1) -> shape [3,3,1,4]
static const float conv1_weights[] = { -0.013006928, 0.052514654, 0.3308295, 0.23587856, 0.37412256, -0.12428157, -0.12785678, 0.092448235, 0.51979434, 0.26796374, 0.11025464, 0.30701604, 0.37487727, 0.33787963, -0.043551754, 0.43335778, 0.50335014, 0.1351254, 0.012763259, 0.09662639, -0.1039135, 0.46803546, -0.027705627, -0.2720974, 0.112422675, 0.16793564, -0.44712543, 0.27267516, 0.4409682, -0.09921773, 0.02049797, -0.10773806, 0.20091721, 0.3523908, -0.35431004, 0.09776787 };
static const float conv1_biases[] = { 0.092024036, 0.049219284, 0.20675494, 0.056861363 };

// Conv2D 4 filters (3x3x4) -> shape [3,3,4,4]
static const float conv2_weights[] = { -0.03487213, 0.32123038, 0.09787129, 0.11164576, -0.014153743, -0.091051176, -0.13975494, 0.31535095, -0.30334726, 0.28391838, 0.040475123, -0.23280929, 0.03983691, -0.12808971, 0.12604314, 0.25124943, 0.34388295, 0.3317762, 0.12612765, 0.01464312, -0.018778212, -0.1768957, 0.24519676, 0.27451187, -0.25662795, 0.31121686, -0.22143047, 0.015658159, 0.4181698, 0.09473117, 0.028627768, -0.06811778, -0.021695698, 0.08795263, -0.40262347, 0.41905823, 0.31008416, -0.10774226, -0.40883714, 0.3534138, -0.12891093, -0.002336803, 0.1604111, -0.4003015, -0.08750545, 0.29693255, 0.16405332, 0.29487893, 0.34203944, -0.052496094, 0.07398583, 0.2617179, 0.35989213, -0.16915406, -0.11791486, 0.13267966, -0.10930654, 0.28677112, -0.06174299, 0.2576202, 0.3538356, -0.12711108, 0.22343071, 0.17548949, 0.29214177, -0.2303775, 0.19812344, 0.1476932, 0.0649545, 0.1299199, -0.13861205, 0.33720562, -0.1978089, 0.062174838, 0.08359506, -0.09319211, -0.06868179, 0.056109723, 0.051784527, -0.11509438, -0.23314118, 0.06956024, -0.14934202, 0.23958743, -0.2086862, -0.20700334, -0.05686912, 0.11978772, 0.19538032, 0.106110334, -0.041990295, -0.121938266, -0.13504978, -0.06699886, -0.08564884, -0.031206343, 0.050539523, -0.28520325, 0.04238145, -0.1741947, 0.17879935, 0.09365681, -0.17976408, -0.15236105, -0.06265621, -0.11857745, -0.17934366, 0.3261815, 0.17790566, 0.19306162, 0.36399212, 0.3139553, -0.32645443, -0.03248266, 0.08423267, 0.28810734, 0.14954121, -0.22070065, 0.018689228, 0.12061099, 0.36053002, -0.14898342, 0.32935396, 0.4152317, 0.014101478, 0.114752114, 0.2057272, 0.07763896, -0.047614463, 0.14869402, -0.48025617, -0.05627416, -0.10785226, -0.14176108, -0.33203578, 0.015088225, 0.07032499, 0.3701881, 0.369519, 0.14896011, 0.039639268, -0.15935409, 0.08316984, -0.031282537 };
static const float conv2_biases[] = { 0.056636304, 0.08686447, 0.040629983, 0.08706406 };

// Conv2D 8 filters (3x3x4) -> shape [3,3,4,8]
static const float conv3_weights[] = { 0.2612895, -0.14293614, -0.24704693, 0.033847593, 0.19759513, -0.04396718, 0.18549931, -0.1497004, 0.12982202, 0.116423376, -0.18914132, 0.10760966, -0.07914929, 0.093477845, -0.23365489, 0.016281577, -0.1461098, -0.07402766, 0.08123549, 0.25366685, 0.17001282, -0.008700933, 0.003976913, -0.24915811, -0.18151626, 0.00448174, -0.16560936, 0.18327191, 0.0071463226, -0.120424815, 0.016090928, 0.26296842, 0.010496771, -0.02070395, 0.2623469, -0.052956752, 0.1774641, -0.103968374, -0.1183773, -0.12690598, 0.047876224, -0.046221074, -0.0226399, 0.023085495, -0.08301618, 0.3137854, -0.29387507, 0.23948911, -0.088251516, 0.11308062, 0.1767525, 0.37037864, -0.07511342, -0.08972957, -0.17750247, 0.11390811, 0.10339316, -0.23381968, 0.17258994, 0.00763402, -0.086173475, 0.019450324, -0.08638137, 0.31775674, -0.15057519, -0.3639849, -0.100649625, 0.08897505, -0.1463464, -0.040527795, -0.07067275, -0.04910255, -0.33613822, 0.3192447, -0.054632228, -0.13693029, -0.11595578, 0.10165867, -0.0039297305, -0.09253458, -0.26760402, -0.33240625, 0.05996953, 0.35524783, -0.03994178, -0.21674383, -0.14852993, 0.02499393, 0.058511507, -0.35265777, 0.02180226, -0.045694184, 0.11271904, -0.12531082, -0.091998816, 0.18603635, -0.03262353, 0.041715756, 0.113738105, 0.32364058, 0.09704796, 0.3100634, -0.043902084, -0.053122465, 0.030745313, 0.12275172, 0.05571297, -0.15235636, 0.118252955, -0.0037045856, -0.15113854, 0.36698437, -0.21310323, -0.38750097, 0.19515179, 0.4439868, -0.20119613, -0.08716594, 0.1726022, -0.016415838, 0.017969918, 0.14463244, 0.28236774, 0.18454227, 0.13245405, 0.33365357, -0.04327907, 0.253196, 0.115944825, -0.19962172, -0.051785897, 0.19030978, 0.063333586, 0.05916197, 0.16020638, -0.0007700811, 0.176794, 0.14070508, -0.003274687, -0.27716884, 0.21242881, 0.23328972, -0.112197, 0.2407089, 0.078630805, -0.094694555, 0.11341124, 0.12945253, 0.12611072, -0.13905123, -0.1765515, -0.36152118, -0.083982766, -0.10522438, 0.27959377, -0.21759935, 0.11155276, 0.14126277, 0.21827503, -0.11877283, -0.03560305, 0.08849318, 0.31847495, 0.046809778, -0.11306629, -0.14031549, 0.13428694, -0.11183573, -0.37343267, 0.03138435, -0.19585647, -0.07406485, -0.3009169, 0.2930223, 0.02760383, -0.08714468, 0.009490647, -0.06659941, -0.16140473, 0.17536466, 0.054466024, -0.228748, -0.15215282, -0.024776159, 0.3152567, -0.03012955, 0.10391613, -0.034441978, 0.17751884, 0.056817446, 0.15839423, -0.0050807735, 0.34237337, 0.27279967, 0.1414174, 0.29738337, 0.06400519, 0.116942234, 0.30402604, 0.078656696, 0.47836512, 0.23755787, 0.06956001, -0.30809015, 0.33029062, 0.12751336, 0.07331243, 0.2389474, 0.13624573, -0.20505783, 0.021944987, -0.011764594, -0.25350064, -0.17069158, -0.080096066, -0.23612234, 0.09744093, 0.30106315, 0.17512439, -0.008958555, -0.035132743, -0.106683746, 0.134053, -0.2802923, 0.17160326, 0.15916516, -0.106084175, -0.07098854, -0.17416376, 0.04433102, 0.30991444, -0.20798525, 0.37005863, 0.008114886, -0.25576726, -0.10958251, -0.03414804, 0.30850774, 0.037057854, -0.068740785, 0.117033675, -0.19558042, -0.37149322, -0.12987018, -0.20401436, -0.29945377, -0.12557787, 0.076518506, -0.044494063, 0.35119563, 0.1754594, -0.14734258, 0.34107068, 0.26432976, 0.32849163, -0.09761697, -0.19158034, 0.15190794, -0.13427886, 0.04402215, -0.10011488, -0.21733113, 0.2616226, -0.0105885165, -0.12322944, 0.1164218, 0.15766118, -0.25336882, -0.22318561, 0.2444845, 0.15432414, 0.03242836, 0.085035846, -0.13011165, -0.03675828, -0.2192443, 0.029497616, -0.19624525, 0.07665505, 0.09337494, 0.30471018, 0.2894279, 0.043306828, 0.013714123, 0.26521307, -0.06792191, -0.13822058, 0.03792165 };
static const float conv3_biases[] = { 0.029675534, 0.041953787, 0.01833088, -0.03400233, -0.002593667, 0.08668897, 0.06841709, 0.023940621 };

// Conv2D 8 filters (3x3x8) -> shape [3,3,8,8]
static const float conv4_weights[] = { -0.23589014, -0.020541733, 0.10350853, 0.13808794, -0.059882373, -0.024842924, -0.13328475, -0.18991731, 0.19606479, -0.13584784, 0.020229807, 0.21101129, 0.25521147, -0.2842782, -0.17822817, 0.05010315, -0.33061302, 0.022949597, -0.14742008, 0.13071658, -0.16107738, -0.18878435, 0.2056569, 0.14353645, 0.01016005, -0.11161154, -0.037395198, 0.047122464, -0.10202803, 0.08802496, 0.2054864, 0.037611697, -0.22599523, 0.16236503, 0.013623393, -0.060001273, 0.008367365, 0.19283509, -0.10932796, -0.0021964426, -0.1690602, 0.105359055, -0.062400058, 0.13485166, -0.07621775, 0.117278, 0.015717654, -0.14879748, 0.02953327, 0.031922296, 0.16781262, 0.12170966, -0.042742092, -0.093739524, -0.007996974, 0.27396393, -0.056977917, 0.10105277, 0.07354779, -0.004687494, 0.04254482, 0.29749238, -0.10613141, -0.14872558, -0.07226764, 0.12226293, 0.09087598, 0.042881906, 0.24335451, 0.094930984, -0.059704438, 0.013959043, -0.06497552, -0.1209734, 0.0748143, 0.28093946, 0.21731997, -0.110857904, 0.016627893, 0.120894805, -0.266727, -0.10863977, 0.091318525, 0.02481527, 0.047420762, -0.19654416, 0.13875468, 0.16281722, -0.16620861, -0.15848364, 0.14850226, -0.20739073, -0.29606226, 0.032893855, -0.0061664456, 0.17315221, 0.009510098, 0.038136102, -0.023197671, 0.12913398, 0.06731654, 0.034791686, 0.08356099, -0.16365302, -0.040708087, 0.13368341, -0.1417715, 0.19206305, -0.03346289, -0.23598798, -0.045028623, 0.06546528, 0.0063244696, 0.06680143, 0.08071279, 0.008147865, 0.1674198, 0.13770488, 0.16121106, 0.018249966, 0.21146151, -0.09927911, 0.030971719, -0.08328227, -0.092874326, 0.04882905, 0.11660427, -0.052592643, 0.015202842, -0.13274339, -0.10779265, 0.22983567, 0.2797618, 0.26665136, -0.021429928, -0.19953668, 0.060158543, -0.16689253, -0.10632303, 0.20126286, 0.1760316, 0.10163159, 0.14584434, 0.0027376637, -0.22363108, 0.016075423, 0.12612806, 0.09341659, -0.20304652, 0.20337038, -0.12427962, 0.03334888, -0.29658702, -0.22237022, 0.16271105, -0.16889523, -0.3253785, 0.11114009, -0.23549604, 0.021936195, -0.16619611, -0.027486911, -0.094409354, 0.11627203, -0.010397158, 0.24139947, 0.19866954, 0.024137415, -0.11633323, -0.085407495, -0.0016858311, 0.24653769, 0.13900548, -0.26751342, 0.06257079, -0.108568884, -0.010824798, 0.1403727, -0.049303632, 0.18146144, -0.034798265, 0.18230097, 0.13094637, -0.05799575, 0.16203693, -0.07258774, 0.29336813, 0.042494785, 0.05900091, -0.15705891, 0.037096318, 0.26235786, -0.1314141, 0.16209489, 0.23933187, 0.008626518, 0.1660068, 0.066000834, 0.093168184, 0.18076047, 0.14240749, -0.071564324, 0.034370076, -0.14558448, -0.01812874, -0.18130244, -0.08486253, 0.041704692, -0.12768207, 0.01584126, 0.17761761, 0.11633866, 0.1398107, -0.11718482, 0.043039214, 0.07851951, -0.10846596, -0.37124825, 0.14492412, -0.01041654, 0.092759535, 0.0036964144, 0.056584325, 0.15071315, -0.21961105, 0.058715366, 0.12192942, -0.06989216, 0.0943815, 0.10266313, -0.08650396, -0.08546781, 0.010100789, 0.15036026, 0.12824695, 0.24711142, 0.32788506, -0.11986662, -0.13175018, 0.18073155, -0.08125136, -0.30238357, 0.12778255, 0.047767665, 0.18386386, -0.10299323, -0.04395461, 0.17824724, -0.09213552, 0.37958708, -0.020795386, 0.11581238, -0.10155206, 0.24817218, -0.12459181, 0.0319961, -0.01029007, 0.062371805, -0.12154618, -0.19619283, 0.14094113, 0.28972006, -0.0712177, -0.055174705, -0.008833608, 0.17717688, 0.14336987, -0.013530332, -0.094350986, 0.13211286, 0.20921715, 0.1636971, -0.21878242, -0.049515504, 0.20074815, -0.064302705, 0.10848675, 0.11525282, 0.18644427, 0.0008479703, -0.044643268, -0.005584258, 0.051802438, -0.13987045, 0.08157853, -0.15187022, 0.12557015, 0.08051434, 0.06929916, 0.2961981, 0.21024877, 0.20368835, -0.068327464, 0.081845954, 0.23692004, -0.12064697, 0.28147784, 0.026037056, -0.06929328, 0.07208183, 0.3033286, -0.042357605, 0.05555064, 0.11754211, 0.27452952, -0.21175648, -0.073414735, -0.1368837, -0.11734974, -0.14761153, 0.17033519, 0.032231882, 0.11534742, 0.27826104, 0.0077534304, -0.076387174, -0.1031211, -0.03875422, -0.19980137, -0.110694624, 0.06201874, -0.0436613, 0.19548012, 0.1879243, 0.16449735, 0.17668757, 0.13591412, 0.18675652, 0.39487454, 0.16291547, 0.123552285, -0.016766267, -0.19508348, -0.12917681, 0.00867537, 0.3594469, 0.15223604, 0.07915528, 0.07110689, -0.13029748, 0.10114108, 0.00484659, -0.05439594, -0.19072832, -0.071993336, -0.05353691, -0.16630282, 0.0019635372, -0.18282254, 0.08943415, 0.027886901, -0.051138062, 0.02962179, 0.17515247, -0.07853997, 0.16331474, -0.03139262, 0.17648563, 0.057882432, -0.030079652, 0.25338376, 0.06794853, 0.1557834, -0.015913792, 0.087247804, -0.20553832, 0.19267504, 0.118530504, 0.06598409, -0.0044755624, 0.14148429, -0.013443826, -0.046971694, -0.06741119, 0.06872362, 0.119955756, -0.09507054, -0.16564953, -0.008716677, 0.26905262, -0.19777946, -0.07985873, 0.054719005, -0.041328676, 0.10930898, -0.0296929, 0.1996764, -0.044364087, 0.15028869, 0.30052555, -0.1828136, 0.18818858, 0.060528956, -0.12611185, -0.03102672, 0.14247073, -0.008109569, 0.16839965, -0.0051360964, 0.20910943, 0.05888672, 0.055708162, 0.1983947, -0.05245483, -0.060518954, 0.18182519, 0.08777279, 0.14427361, -0.1612725, -0.33930162, 0.09290142, -0.41443998, -0.027178258, -0.093156226, 0.0015382649, -0.11569282, -0.06878555, -0.19300564, 0.17933995, 0.057533275, -0.19026922, 0.07203724, -0.14212602, -0.05859995, -0.18166506, -0.22664584, -0.11850533, -0.20082082, 0.28562945, -0.12610376, 0.16941954, 0.27718252, 0.07219899, 0.026819961, 0.11164853, -0.24671206, -0.22282696, 0.12924707, 0.13522643, 0.027078202, -0.09468053, 0.007216947, 0.045368347, 0.060637675, -0.055814803, -0.13777056, 0.0030190393, 0.17308111, 0.21696484, 0.31202683, -0.03921185, -0.121429056, 0.14644352, 0.04851847, 0.11291752, -0.07402664, -0.0051595718, -0.2871897, 0.1648198, -0.11238663, -0.0950135, 0.0760626, -0.16815278, 0.079276115, 0.18145491, 0.09554382, -0.07237443, -0.2379838, 0.13200286, 0.09919056, 0.09632237, 0.23436344, 0.09478638, 0.073360115, -0.1878944, -0.22520891, -0.13974161, 0.20010825, -0.25548914, -0.19068989, 0.20178902, 0.12162141, 0.05979111, 0.088796854, 0.1969772, -0.10892779, -0.056046605, 0.102897756, 0.057122584, 0.14164545, 0.08390543, -0.11651012, 0.13649364, -0.20972808, -0.053368416, -0.016988628, 0.098004475, -0.13339968, 0.058514223, -0.25252342, -0.26075944, 0.07581, -0.05420768, 0.26343226, -0.18281037, 0.097174786, -0.11905853, 0.20584637, 0.061410036, -0.1505454, 0.15423635, -0.16407037, 0.191922, -0.047726665, 0.17208776, 0.10662704, 0.015408148, 0.09903772, -0.13224927, 0.09920613, 0.19513102, -0.038097553, 0.29180902, -0.080598615, 0.21110348, -0.1671167, -0.05532396, -0.006052235, -0.049772352, 0.2551867, -0.0711989, 0.022838695, 0.053603236, 0.029955802, -0.07656335, -0.10218176, 0.046586595, -0.21712217, -0.17635533, -0.17843662, -0.1769899, 0.3263296, -0.2373064, -0.02695972, -0.08910908, 0.28821817, 0.0041718637, 0.14507629, 0.10029638, 0.22927736, -0.1396626, 0.070637956, 0.03282006, 0.17963544, 0.22151658, -0.15065244, -0.09125474, 0.12972322, 0.12882684, -0.012268894, 0.14600095, 0.035891548, 0.280526, 0.114891894, 0.07174073, 0.21608075, -0.21898659, 0.17442031, 0.011367077, 0.14019154, -0.16286057, 0.1811866, -0.24539807, 0.05109901, 0.28297094, -0.16242938 };
static const float conv4_biases[] = { 0.047004964, 0.034113664, -0.019994771, -0.046247184, -0.0314259, 0.042263146, 0.03106815, -0.029351722 };

// Conv2D 16 filters (3x3x8) -> shape [3,3,8,16]
static const float conv5_weights[] = { -0.057785384, -0.047478456, 0.07495972, -0.007813597, -0.07640727, 0.037775505, -0.2303567, -0.09927184, 0.09849079, 0.118004456, 0.13478227, -0.04362727, 0.23257244, -0.0949819, 0.11446762, -0.09196248, 0.08289334, 0.031752747, -0.15067643, 0.25840944, -0.21995026, 0.19481461, 0.24114439, 0.06669763, -0.112774454, -0.17677833, -0.19780375, -0.07370462, 0.0059324363, -0.12562703, -0.10721669, 0.112572186, -0.12363257, -0.087286286, 0.1437147, -0.04592248, 0.04112987, 0.19059531, -0.14328119, -0.04681403, 0.08006004, -0.007434359, -0.031564195, -0.089773335, -0.042110965, 0.005225908, -0.027554816, -0.012247638, -0.085325636, -0.08326148, 0.09566405, 0.27375323, -0.021047698, -0.0006317307, -0.057576045, -0.10376532, 0.05771556, -0.07214338, -0.003662727, -0.19353452, 0.2003451, 0.080129474, -0.20739461, -0.014145334, 0.112714805, 0.1008674, 0.010165261, 0.18668856, -0.12792246, 0.048903886, 0.16612114, 0.10114594, 0.09377925, -0.09609646, -0.05789509, 0.1098012, 0.007991676, 0.081134364, -0.044908173, 0.024824085, 0.06313596, -0.089270726, 0.099686615, -0.108890116, -0.06039771, -0.042371582, 0.049640194, -0.04638085, 0.10496955, -0.081790365, -0.23005931, 0.056229126, 0.04930992, 0.10742064, -0.08479384, -0.02477429, -0.026247045, 0.038084574, -0.21646878, 0.000919412, -0.016331604, 0.100349054, 0.0018387622, 0.0037360466, -0.028231686, -0.17964539, 0.21843447, 0.0968884, 0.10472702, -0.12740417, -0.032640092, -0.20128058, 0.02516381, -0.09741848, 0.1212537, -0.21566205, 0.13316637, 0.009060259, -0.20122992, -0.23844492, -0.1550572, 0.1511189, -0.15625554, 0.0010395292, 0.065880366, 0.020476207, 0.04068842, 0.060733367, 0.025575837, -0.13422993, -0.056902185, 0.08917414, 0.03123398, 0.15105397, -0.05810272, 0.1696302, -0.047320705, -0.08464966, 0.042484254, 0.072600305, 0.03062422, -0.17211105, -0.035166953, -0.24916062, -0.1458946, -0.10524545, -0.11850965, 0.20237587, -0.147122, -0.09617515, -0.20173144, -0.047588382, -0.09048614, -0.030500503, -0.19974932, -0.065075986, -0.0015876996, -0.010467201, -0.13736176, -0.11388713, -0.059820946, 0.07369487, -0.05942831, 0.19243675, 0.06815781, 0.10830363, 0.18003383, 0.07716892, -0.050282564, -0.08287846, 0.027100442, -0.081027575, 0.027275423, 0.0974571, 0.011913997, -0.086655065, -0.107409865, -0.08859002, -0.08521361, 0.13659354, -0.027873322, 0.25540555, -0.08252694, -0.08808092, 0.019747145, -0.18864834, 0.17262886, 0.1455642, 0.07751431, -0.01229459, 0.13822164, 0.01666439, -0.15439637, 0.1080499, 0.073282704, -0.09795085, 0.03546298, -0.046616726, 0.042895284, -0.11910767, -0.16441715, 0.09821682, 0.1452341, 0.034103513, 0.20496611, -0.1703168, 0.110982224, -0.012290293, -0.049596075, -0.1511179, 0.29225478, -0.06333794, 0.06191399, 0.102503814, -0.12868515, -0.07101889, 0.15190978, -0.07413713, -0.09947385, 0.0011800551, 0.14230157, 0.17331873, -0.29064265, -0.042062026, -0.122581124, 0.119296834, -0.10237254, -0.090559624, 0.06591665, 0.18691237, 0.018627891, -0.037208874, -0.26197177, -0.17980082, -0.027658293, 0.18172704, -0.093951575, 0.036535658, 0.09455214, -0.114980064, -0.08819502, -0.09061994, -0.1280987, -0.12939315, 0.11652067, 0.006759284, 0.13062698, 0.01672701, -0.03509383, -0.09796224, 0.06945477, 0.009146803, 0.05427115, -0.012506548, -0.11054343, -0.045025658, 0.111041576, 0.10352577, -0.1100168, -0.049010817, 0.21847248, 0.01934876, 0.17810644, -0.031018341, 0.006836028, 0.06959268, -0.07909138, -0.045895822, 0.0020031268, -0.23947875, 0.065684505, -0.08064558, 0.14717256, 0.0037634557, -0.15488614, -0.016290683, 0.14143212, 0.01875891, -0.08550579, 0.0058445996, -0.07336506, -0.093245946, 0.11089469, -0.124352835, -0.022692474, 0.10876089, -0.064790785, -0.036189515, 0.07890325, -0.11672974, 0.051881902, -0.034234744, 0.17627381, -0.0022826192, 0.18748073, 0.0035176126, 0.029661488, 0.07611129, -0.018571796, -0.06336046, 0.07098712, -0.19914165, 0.08341095, -0.0047634225, 0.002319364, -0.080955885, -0.34109503, -0.062494885, 0.14300252, 0.25934443, 0.025743496, 0.10301668, 0.10762237, -0.19024092, 0.20495191, -0.0030091745, -0.04829323, 0.06906876, 0.17278816, -0.0068035973, 0.023072839, 0.10748687, -0.10011983, -0.07552234, 0.20132752, 0.023194693, -0.05708405, -0.01652449, -0.21651281, 0.10880306, 0.13953806, 0.15888439, -0.13786308, -0.063700825, 0.11327709, -0.09772757, 0.1581306, -0.118676044, 0.22151531, -0.33070716, -0.0804666, -0.04120311, -0.041241344, -0.040976543, 0.22318994, 0.08700476, 0.07655703, 0.07869936, -0.031345773, 0.00041843767, 0.023608895, 0.0735459, 0.028693631, 0.09187944, -0.19208877, -0.0845383, -0.064911164, -0.074462995, 0.11202534, 0.08866176, -0.13912329, -0.090276524, -0.14511721, 0.19572708, 0.14463861, 0.067244574, 0.0787994, -0.13540211, -0.05250894, -0.06435447, 0.10763447, -0.06244604, 0.14905375, 0.008016314, 0.23504023, 0.013805824, -0.080054246, 0.12651837, -0.14354183, 0.024810437, 0.05299319, 0.04081398, -0.077813014, 0.14254223, -0.019063752, -0.15905547, -0.015828801, 0.078179546, -0.13773365, 0.012639966, -0.11520254, 0.024433095, -0.04692523, -0.2486023, 0.26901814, -0.18841636, 0.26354334, 0.055062458, -0.17328824, -0.07672815, -0.067694135, 0.08817588, 0.14038047, 0.06760419, 0.10862798, 0.083961375, 0.14948146, 0.138223, -0.018650915, -0.12148863, 0.026767354, 0.22377934, 0.028975, 0.03300274, 0.17672357, 0.023713306, 0.025123414, 0.034278397, 0.16851069, 0.10443134, 0.06964013, 0.036883473, -0.10389691, -0.20621988, 0.18721347, 0.035494607, -0.16098556, 0.15598048, 0.03257353, 0.02921832, 0.05819188, -0.0414877, 0.03280362, -0.11282197, -0.0076661953, 0.14104235, -0.07810737, -0.012920084, 0.056610145, 0.03920587, -0.07125532, -0.13410383, 0.11759598, -0.016322665, -0.19204128, 0.03757623, -0.21821429, 0.12555155, -0.021801073, -0.11617444, 0.21572359, 0.063773625, 0.039287206, 0.15571453, -0.1927488, -0.123011515, 0.110525705, -0.07148062, -0.18035847, -0.12609833, 0.075202435, 0.19020759, 0.06553847, 0.078026086, -0.15835296, 0.012979164, 0.16692837, 0.08815305, -0.20193401, 0.016641006, -0.1509636, -0.063462034, 0.10591088, 0.0024298648, -0.14515531, 0.028736899, -0.003509777, -0.06353992, 0.015869783, -0.02788347, 0.013086202, -0.07527312, -0.03184695, 0.015897615, -0.012786657, -0.024413817, -0.0005988757, 0.14856169, -0.12935337, 0.08685427, -0.112168744, 0.08007365, -0.10600238, -0.025278771, -0.03902648, 0.13444763, 0.054186445, -0.07034799, 0.08347671, 0.107058994, -0.22243102, -0.056090467, -0.08249433, -0.045705568, -0.18276566, -0.042230103, -0.14491987, 0.23312092, -0.11548881, -0.06282508, -0.18561877, 0.15153353, 0.0062130317, -0.11585842, 0.16169317, -0.045269534, -0.15964966, -0.05921074, -0.13632168, 0.063563935, 0.20177513, 0.043350257, 0.15905222, 0.021629006, 0.016465114, 0.06758113, 0.14895795, -0.27287328, 0.08419712, 0.076957084, 0.14912482, 0.14214571, -0.08479674, 0.14584543, 0.1133849, 0.1057836, -0.10021637, -0.094047315, 0.102771506, 0.23337325, -0.16317421, 0.038721588, 0.10592361, 0.034007683, -0.13261838, -0.11902034, 0.11577408, -0.06517675, -0.084359325, 0.084210426, -0.024057496, 0.13327266, -0.09555292, 0.029383091, -0.16564842, -0.086676165, 0.12043147, 0.03552497, 0.14283124, 0.08561946, -0.14056261, -0.13004893, 0.043597113, 0.15458849, 0.1018165, 0.12175467, 0.010047462, 0.05312871, -0.23168166, -0.04318014, 0.13974954, 0.031183746, 0.12760462, 0.045715217, 0.015290686, -0.07970313, -0.05258645, 0.12140718, 0.06901612, -0.07875857, 0.084277086, 0.15187825, 0.08517084, 0.098870635, -0.048000723, 0.14016034, 0.065181784, -0.091756314, 0.12747265, 0.12201266, 0.13876745, 0.038939238, -0.07927321, -0.17529494, 0.1735009, -0.09725611, -0.17485425, -0.014557869, -0.14512637, 0.029128252, -0.060084585, 0.06879533, 0.1654075, 0.030666757, 0.1423895, 0.06665264, -0.08719677, -0.15564667, -0.10309342, -0.0188746, 0.10510047, -0.10991633, 0.016137071, -0.07447803, 0.08375125, 0.18400207, -0.1562338, 0.035354257, -0.02914872, 0.10706967, 0.019694028, 0.09842805, -0.093415745, 0.14676642, -0.1349344, 0.13766856, -0.1155796, -0.03933023, 0.22968182, 0.054705594, 0.026127245, 0.111056186, 0.06843594, 0.055598814, 0.05536249, 0.10598641, -0.055022076, 0.12899493, 0.19956674, -0.032195084, 0.017502125, -0.03681958, -0.16291738, 0.08391657, 0.08407564, 0.119811654, 0.06550465, 0.045614697, 0.037721135, -0.23295972, -0.090922855, -0.09931647, 0.10109494, 0.06627781, 0.047542702, -0.029683704, 0.09483175, 0.10672766, -0.091937795, -0.09478331, -0.0786819, 0.12431919, 0.09544134, -0.16535348, 0.04654169, 0.03465342, -0.096934006, -0.2006946, -0.09620951, -0.16293067, 0.08507549, -0.025164386, -0.12454402, -0.09613698, -0.036683068, 0.026748154, 0.1416728, 0.06794878, -0.103626505, -0.05974636, -0.07541853, 0.10704829, -0.14463699, -0.06737405, -0.09399771, 0.05973366, -0.05076985, 0.12614018, 0.12486127, -0.011715116, -0.15123576, 0.016994782, 0.11998501, 0.15135445, 0.10199778, 0.112019666, -0.31645364, -0.26637766, 0.035728265, 0.020152772, -0.023099354, 0.18985984, -0.083318315, 0.08524562, -0.091044255, 0.013571952, -0.1307534, -0.202794, -0.057366077, -0.071770474, 0.018408773, 0.10779567, 0.16689424, -0.03306566, 0.18232873, -0.13461177, -0.1449434, 0.044757403, 0.1941989, -0.0009642969, 0.046825267, -0.14389212, 0.08516814, -0.13645259, 0.0059856004, 0.2052135, 0.04274391, -0.1510741, 0.022193363, 0.09338561, 0.13154112, -0.34102854, 0.024501927, -0.038995944, 0.18556044, -0.07025311, -0.07167781, -0.14656612, 0.07193774, 0.0781728, 0.027581668, -0.041511875, 0.01633994, 0.13103314, 0.060438316, -0.020462863, -0.13538083, -0.15482217, 0.1649553, -0.10539528, 0.13556339, 0.12159529, -0.13441499, 0.00068260904, -0.045697667, 0.19402233, 0.13120118, -0.16168822, 0.08937592, 0.09996127, 0.15655114, 0.046057697, 0.11881327, 0.11226048, 0.10391641, 0.19153869, 0.12580934, 0.07218822, 0.113231495, -0.14309765, 0.034814518, 0.10484523, -0.18959223, 0.20327498, -0.24658385, 0.3458378, 0.005274548, -0.1427611, 0.22338425, 0.014369527, -0.11954269, 0.022206977, 0.052583195, 0.13512255, -0.1225822, -0.05056277, 0.069857776, 0.08347966, 0.10165506, -0.14235412, 0.23478413, 0.015679318, 0.033636708, 0.13492776, -0.011026182, 0.08946623, 0.11276976, 0.10405605, 0.01777196, 0.06439841, -0.15409292, -0.08773939, -0.13662407, 0.17403297, 0.047638223, -0.20694649, -0.07036693, 0.11540827, 0.20063183, -0.07454928, -0.0101630725, -0.07423417, 0.027377423, 0.24091512, 0.020173557, 0.23260097, 0.003523558, -0.16124587, 0.08245326, 0.19178768, -0.05403018, 0.062202632, 0.13000672, 0.0612522, 0.044505917, 0.05083721, 0.054014478, 0.2709207, -0.07541689, -0.009424334, -0.18726234, 0.09221678, 0.08590301, -0.016528573, -0.08067034, 0.17594628, -0.002930889, -0.13826506, -0.1352707, -0.10335109, -0.07347321, 0.15382472, -0.16119534, 0.066413224, 0.10464314, -0.031169556, -0.07745275, 0.054717895, -0.08321278, -0.105510905, 0.016090529, 0.052831117, -0.14749399, 0.20936422, 0.19146858, -0.04506774, 0.0612121, -0.09012374, -0.0885486, 0.0071980422, 0.004550432, -0.07882981, 0.06588235, -0.15923026, 0.046683926, 0.15152457, -0.19848964, 0.11684999, 0.18913262, -0.23703861, -0.11260182, 0.007974529, -0.007914082, 0.0074404427, -0.095354415, 0.15954304, -0.108383864, 0.014745637, -0.17343736, 0.03962397, -0.11122461, -0.06329702, -0.2779545, -0.22596346, -0.11550452, -0.1078697, -0.12112367, 0.08186099, -0.0012064162, 0.13255304, -0.13946627, 0.089332275, -0.15165868, 0.17383955, 0.032929335, 0.09310418, 0.0034515748, -0.018227508, -0.0024757748, 0.09172173, -0.08102953, 0.063379094, -0.19837573, 0.048706573, 0.017442333, 0.07664242, -0.115673795, 0.012375789, -0.031752434, -0.021793954, 0.043261964, -0.102487236, -0.16401146, 0.10435565, -0.0038947216, -0.003695842, -0.112334274, -0.07701559, 0.25561795, 0.21165611, -0.1123233, -0.08530945, -0.01606247, 0.26245865, -0.19891046, -0.11960088, 0.19035655, 0.058959186, 0.09999948, -0.048939474, 0.15463641, -0.05547502, -0.05074278, -0.19106567, 0.16121289, -0.09570096, 0.23705558, -0.0043530846, 0.121484466, -0.053755198, 0.1469477, 0.091932155, 0.067907214, 0.060104992, 0.03459725, -0.15041974, 0.030940942, -0.02768728, 0.12278694, -0.03040271, 0.06719446, 0.16167739, -0.07284334, 0.04978789, -0.007991557, 0.18035652, 0.17123097, -0.15000978, -0.063137084, 0.009986075, 0.08806496, 0.00037748535, -0.122964546, 0.089963816, 0.046951182, -0.07214446, -0.002251122, -0.09207225, 0.038810328, -0.03689644, 0.025250502, -0.10885326, -0.1661942, -0.022399573, 0.060349926, -0.059185438, -0.09853232, 0.10488836, -0.2187487, 0.11148374, -0.15847372, 0.04312259, -0.048901815, 0.00063585525, 0.07638477, 0.0670408, -0.14099889, 0.07617274, 0.18978983, -0.16214624, 0.08256999, 0.009980118, 0.09429346, -0.0688206, 0.11825355, 0.06648001, 0.1661743, -0.26208305, 0.1678768, 0.1855944, 0.062295355, -0.04587674, 0.09365544, -0.08896513, -0.009171486, 0.038332984, 0.15800948, -0.012363481, -0.12333527, -0.16698362, -0.0482468, -0.08142875, 0.21041177, -0.027684541, 0.06263008, 0.036007036, -0.014749205, 0.06747505, 0.004489915, -0.017151564, 0.07395477, -0.010796101, -0.14082213, -0.06194358, -0.063523814, 0.0642755, -0.08866626, 0.1717224, -0.05210199, -0.18482566, -0.08873825, -0.07138856, 0.18824986, 0.03984444, 0.093806066, -0.19587775, -0.124781325, 0.10236241, -0.23980929, 0.004205221, 0.11841137, -0.13293414, -0.0062088305, 0.16803445, -0.024440955, 0.07987436, -0.18281804, -0.16192873, 0.15602492, -0.049456198, 0.108418636, 0.08603252, 0.053398483, -0.06518125, 0.012253648, 0.1089379, -0.16592032, 0.15346642, -0.045612577, -0.034389634, 0.116228834, -0.09766218, 0.15942067, 0.024278615, -0.028614443, -0.049770333, 0.10658855, -0.10189448, -0.11127914, 0.11051155, 0.16894597, -0.12115351, 0.14123382, -0.031937037, 0.025680847, -0.21653187, 0.05161339, -0.10733407, -0.028247872, -0.062299956, 0.096173935, -0.060031302, 0.1747471, -0.098768234, 0.004775868, -0.0131853875, -0.0043928316, -0.006609385, -0.11359993, -0.10857644, -0.18455304, -0.0020130302, 0.022864277, 0.0055421833, 0.060276546, -0.17573027, -0.08067188, 0.015833555, -0.06637765, -0.076182514, -0.03862636, -0.0025297676, -0.04286458, 0.0968028, 0.002136689, -0.011997384, -0.28228718, -0.06352902, 0.15985322, 0.03797284, -0.17185663, -0.04263851, -0.15529865, 0.10776754, -0.024715535, 0.035446472, 0.19758962, 0.22284672, -0.10997907, -0.12407805, -0.13086827, 0.095600665, 0.31143424, -0.058217455, 0.16911085, 0.02237235, 0.17401397, 0.17584305, 0.20335239, -0.04228256, -0.18670572, -0.21569552, 0.0016879331, 0.18318494, -0.025483066, 0.06907464, 0.06669072, 0.10703229, 0.06592673, 0.15936837, -0.20528166, -0.14337589, -0.04350739, -0.15456991, 0.15461811, 0.12421686, -0.012385334, -0.014709889, 0.15914275, 0.1013278, -0.04330672, 0.10796311 };
static const float conv5_biases[] = { -0.00044364104, -0.006506967, 0.059011552, 0.04570632, -0.033891357, 0.029380485, 0.00061016064, 0.030828193, 0.053384136, 0.023758752, -0.060150914, -0.007294748, 0.022957195, -0.038104344, -0.025174338, -0.023437021 };

// Final Dense layer weights [16,10] and biases [10]
static const float dense_weights[] = { 0.16128753, -2.029991, 0.28826493, 0.39784914, 0.46843943, 0.8498659, -0.35356393, 0.5046173, -0.6117803, -0.42950743, 0.47881153, -1.397971, 0.115595005, -0.13338526, -0.10805239, 0.32562438, 0.32491016, -0.494389, 0.67776823, -0.20973861, -0.59823984, 0.8045467, 0.23402463, -0.44267145, 0.15130107, -0.9140701, -0.13442007, 0.052544456, -0.04876563, 0.2623193, -0.56918675, 1.1496418, 0.0043852977, 0.0036036395, -0.3842144, 0.052604657, -0.4411106, -0.09875813, -0.22432102, 0.28011078, 0.2807808, -1.910893, 0.41266102, -0.07916883, 0.16573562, 0.32518125, 0.86893606, 0.39130977, -0.22154579, 0.9695019, 0.25280732, 0.20835684, 0.0046533286, 0.23694219, 0.35766548, 0.32289147, -0.55105275, 0.44637507, 0.21543762, 0.015818175, -0.1568418, -0.06109994, -0.4414657, -0.040432822, 0.037447494, 0.03361994, 0.40719697, 0.032833807, 0.26096323, -0.10118068, -0.5610177, 0.17420678, -0.40716946, 0.18454023, 0.1664048, 0.43179023, 0.028000228, 0.14996454, -0.2922144, -0.14591679, 0.33689654, 0.67487055, 0.43702376, -0.2106053, 0.08352512, -0.03977526, 0.21462315, 0.10223282, -0.25230944, -0.35827968, -0.13097881, 0.3475594, -0.47645694, -0.45703536, 0.49418575, -0.1165967, -0.30376628, -0.34850028, -0.7105204, -0.2188926, -0.08386374, -1.8963889, 0.7990651, 1.1069677, 0.47892925, 0.5640773, -0.48507503, 0.9108832, -0.099108405, -0.17995283, -0.16530856, -0.37270638, -0.56183785, 0.21463273, 0.1960877, 0.62421, -0.367177, -0.44701695, -0.16933459, -0.0018506638, 0.109465815, 0.94130695, -0.48253247, 0.27191263, -0.32655972, -0.18410794, 0.025667097, 0.3013664, 0.03288969, -0.28720888, 0.7267234, -0.3152159, 0.6060218, 0.2167232, -0.13597119, -0.11853634, 0.18020594, -0.3576225, 0.4241655, -0.39260787, -0.17739058, -0.39951763, 0.08422582, -0.32696962, -0.19563195, -0.3270247, -0.3579065, -0.28601465, 0.54953545, 0.28741735, 0.084478565, -1.9175496, 0.47688523, 0.3568503, 0.81973726, 0.7101386, 0.19497022, -0.0038276787, 0.13649681, -0.14289275 };
static const float dense_biases[] = { -0.06806485, 0.69960797, -0.06749315, -0.2541069, -0.02818704, -0.16636817, -0.0048672054, -0.06310837, -0.070888855, -0.012925977 };

// ---------------------------------------------------------------
// Tensor operations (optimized for microcontrollers)
// ---------------------------------------------------------------
void conv2d(const float* input, const float* weights, const float* bias,
    int in_w, int in_h, int in_c,
    int k_size, int out_c,
    int stride, float* output) {
    int out_w = (in_w - k_size) / stride + 1;

    for (int oc = 0; oc < out_c; oc++) {
        for (int y = 0; y < out_w; y++) {
            for (int x = 0; x < out_w; x++) {
                float sum = bias[oc];

                for (int ic = 0; ic < in_c; ic++) {
                    for (int ky = 0; ky < k_size; ky++) {
                        for (int kx = 0; kx < k_size; kx++) {
                            int in_pos = ((y * stride + ky) * in_w + (x * stride + kx)) * in_c + ic;
                            int w_pos = ((ky * k_size + kx) * in_c + ic) * out_c + oc;
                            sum += input[in_pos] * weights[w_pos];
                        }
                    }
                }
                output[(y * out_w + x) * out_c + oc] = sum > 0 ? sum : 0; // ReLU
            }
        }
    }
}

void maxpool2d(const float* input, int in_size, int channels,
    int pool_size, float* output) {
    int out_size = in_size / pool_size;

    for (int c = 0; c < channels; c++) {
        for (int y = 0; y < out_size; y++) {
            for (int x = 0; x < out_size; x++) {
                float max_val = -INFINITY;

                for (int py = 0; py < pool_size; py++) {
                    for (int px = 0; px < pool_size; px++) {
                        int pos = ((y * pool_size + py) * in_size + (x * pool_size + px)) * channels + c;
                        if (input[pos] > max_val) max_val = input[pos];
                    }
                }
                output[(y * out_size + x) * channels + c] = max_val;
            }
        }
    }
}

// ---------------------------------------------------------------
// Inference pipeline
// ---------------------------------------------------------------
float* mnist_inference(const float* input) {
    // Allocate memory buffers (adjust sizes according to your architecture)
    static float buf1[26 * 26 * 4];  // First conv output
    static float buf2[24 * 24 * 4];  // Second conv output
    static float buf3[12 * 12 * 4];  // After first maxpool

    static float buf4[10 * 10 * 8];  // Third conv output
    static float buf5[8 * 8 * 8];  // Fourth conv output
    static float buf6[4 * 4 * 8];  // After second maxpool

    static float buf7[2 * 2 * 16];  // Fifth conv output
    static float buf_global_pool[16];  //After global maxpool
    // ... Add more buffers for intermediate results ...
    static float final_output[10];  // Final classification result

    // Layer 1: Conv2D 4 filters
    conv2d(input, conv1_weights, conv1_biases,
        28, 28, 1,
        3, 4, 1, buf1);

    // Layer 2: Conv2D 4 filters
    conv2d(buf1, conv2_weights, conv2_biases,
        26, 26, 4,
        3, 4, 1, buf2);

    // Layer 3: MaxPool2D
    maxpool2d(buf2, 24, 4, 2, buf3);

    // Layer 4: Conv2D 8 filters
    conv2d(buf3, conv3_weights, conv3_biases,
        12, 12, 4,
        3, 8, 1, buf4);

    // Layer 5: Conv2D 8 filters
    conv2d(buf4, conv4_weights, conv4_biases,
        10, 10, 8,
        3, 8, 1, buf5);

    // Layer 6: MaxPool2D
    maxpool2d(buf5, 8, 8, 2, buf6);

    // Layer 7: Conv2D 8 filters
    conv2d(buf6, conv5_weights, conv5_biases,
        4, 4, 8,
        3, 16, 1, buf7);

    // Global Max Pooling (2x2 -> 1x1)
    for (int c = 0; c < 16; c++) {
        float max_val = -INFINITY;
        for (int y = 0; y < 2; y++) {
            for (int x = 0; x < 2; x++) {
                // Calculate position in HWC format
                int pos = (y * 2 + x) * 16 + c;
                if (buf7[pos] > max_val) {
                    max_val = buf7[pos];
                }
            }
        }
        buf_global_pool[c] = max_val;
    }


    // Final dense layer (simplified)
    for (int i = 0; i < 10; i++) {
        final_output[i] = dense_biases[i];
        for (int j = 0; j < 16; j++) {
            final_output[i] += buf_global_pool[j] * dense_weights[j * 10 + i];
        }
    }

    return final_output;
}

// ---------------------------------------------------------------
// Example usage
// ---------------------------------------------------------------
int main() {
    // Load your 28x28 input image (normalized 0-1)
    float input[28 * 28] = {};

    // Run inference
    float* output = mnist_inference(input);

    // Get predicted class
    int pred_class = 0;
    for (int i = 1; i < 10; i++) {
        if (output[i] > output[pred_class]) pred_class = i;
    }
    printf("Predicted digit: %d\n", pred_class);
    
}

