#include <stdio.h>
#include <math.h>

// ---------------------------------------------------------------
// Model parameters (weights/biases exported from Keras)
// ---------------------------------------------------------------
// Conv2D 4 filters (3x3x1) -> shape [3,3,1,4]
static const float conv1_weights[] = { -0.07325755, 1.1865675, -0.17460105, 0.40934697, 0.0067278566, 0.8636283, 0.45649847, 0.5782181, -0.2517621, 0.88706565, 0.5372558, 0.603698, -0.2393193, -0.22988063, -0.917086, 0.9243598, -0.1709271, 0.16026053, -1.2387735, 0.6723341, -0.2249587, 1.0668899, -0.9474671, 0.26665154, -0.3354636, -0.47381037, 0.75013095, 1.6653285, -0.1717411, -0.0008511407, 0.7554222, 1.1162299, -0.02599886, 0.9655173, 0.03283484, 0.3153005 };
static const float conv1_biases[] = { -0.0057602557, 0.009248344, 0.14225759, 0.0031061384 };

// Conv2D 4 filters (3x3x4) -> shape [3,3,4,4]
static const float conv2_weights[] = { -0.01088712, -0.3036457, 0.24031475, -0.34698504, -0.26682404, -0.22727878, -0.18428035, 0.2874258, 0.28785935, 0.010403978, 0.5203401, 0.25949764, 0.5126956, -0.5555797, -0.055433907, 0.58513504, 0.6083265, 0.6415772, -0.6009929, -0.32115903, -0.4709797, 1.0332346, -0.055764534, 0.38916385, 0.018557593, 0.41868, 0.045105934, 0.23267984, 0.41250557, -0.40582815, -0.99003583, 0.050791334, -0.06867215, 0.27649683, 0.21546951, -0.28690234, -0.024974648, 0.15738049, 0.2401684, 0.059852898, -0.1119299, 0.24527204, 0.6021312, 0.053253673, 0.3388022, -0.68192935, 0.18965793, 0.35157827, 0.25378338, -0.25444534, -0.19876163, 0.84034413, -0.47733316, 0.50577575, -0.5050591, 0.39539972, 0.79705817, -0.3527634, 0.1641575, 0.250387, 0.1342169, -0.37232152, 0.3504775, 0.47050747, 0.23209712, -0.12971093, -0.09909364, 0.16289406, -0.35095435, 0.07611779, -0.31883323, 0.31837082, -0.059359442, 0.24805127, 0.08057558, 0.019344294, -0.16560827, 0.5327667, -0.03475747, -0.587979, 0.72544926, 0.22987206, -0.06600979, 0.20631593, -0.3201445, 0.41457087, 0.56551987, 0.81760734, -0.6246146, 0.08307117, -0.23296995, 0.48730856, 0.762274, 0.55056506, 0.51478106, -0.36040822, -0.123235546, -0.18418932, -0.22301318, -0.1336672, 0.10016488, 0.017201573, 0.2694336, 0.3405063, -0.7011545, 0.56025875, 0.438921, 0.43655512, -0.5791701, 0.11916409, 0.04553071, 0.17359571, 0.6005645, 0.11485608, 0.41269487, 0.1991921, 0.72890055, -0.10148199, -0.4755993, 0.9072527, -0.47777984, 0.41334307, 0.14900841, 0.2068486, 0.027522497, 0.36563176, 0.6453733, -0.31193602 };
static const float conv2_biases[] = { 0.3819936, -0.07001688, 0.12729412, -0.13527243, 0.07212647, -0.25915867, 0.25544053, -0.2796472 };

// Conv2D 8 filters (3x3x4) -> shape [3,3,4,8]
static const float conv3_weights[] = { 0.15287168, -0.20409591, -0.09280203, -0.17846659, -0.17123844, -0.02452941, -0.13050608, 0.045706138, 0.21714623, 0.3463425, -0.22927395, -0.18537723, -0.59825796, 0.03659077, 0.19623262, -0.31443736, -0.09767249, 0.15515976, 0.11915348, 0.120993026, -0.20428105, -0.017163128, 0.067816354, -0.01635299, 0.24587846, -0.10959043, -0.23060824, 0.13133955, 0.24761252, 0.13580404, -0.2694428, 0.07657811, 0.050641842, 0.09968607, -0.07344906, -0.11813574, -0.052198283, 0.027025193, -0.04242616, 0.03897246, -0.13237049, 0.27915382, 0.07203275, 0.0046772277, 0.2833235, 0.12686063, 0.12126272, 0.037548255, 0.10849891, 0.17790574, 0.13273388, -0.19460797, 0.06264373, -0.120539546, -0.105678886, -0.36591157, 0.13751115, -1.3597682e-05, -0.12738647, -0.011708451, 0.24454571, 0.072701596, 0.07909019, -0.06745986, -0.21081485, 0.28860134, 0.37528, -0.10813254, -0.03050478, -0.14402059, 0.10086593, -0.58867216, 0.15834863, 0.201875, -0.13897444, 0.05667091, 0.04708601, 0.05241519, 0.019037655, 0.03038402, 0.5048801, -0.4781108, -0.04544161, 0.25084713, 0.3434982, 0.11335812, -0.82281095, -0.22301137, 0.25825077, -0.1017176, -0.09924755, 0.6630139, -0.5048119, 0.19345064, -0.47907588, -0.007575396, 0.08764215, 0.21433954, 0.3500961, 0.15470448, -0.0028568413, -0.18015556, -0.21324863, 0.16492061, -0.093261145, 0.073492646, 0.06138217, 0.008659468, -0.06976022, 0.03613273, -0.0044700857, 0.17592151, 0.17403379, -0.048351374, -0.31549734, -0.65919447, 0.36454767, -0.013422561, -0.033079576, -0.34227178, 0.11156412, 0.2921298, -0.24482234, 0.10613675, 0.42474684, -0.021841811, 0.12919554, -0.109935485, -0.3854803, -0.070635684, -0.37726146, -0.15413578, -0.05213308, -0.03414758, 0.037697617, -0.11171653, 0.21939893, -0.07417507, 0.009189265, 0.2916493, -0.16552831, -0.25041732, -0.03416896, -0.1140154, -0.06999989, -0.34992284, -0.14741378, 0.119151756, -0.14471066, -0.09104585, -0.017922075, 0.09401174, 0.11642597, 0.036401033, 0.10745151, -0.0039744033, 0.14138022, 0.067180656, -0.22724374, 0.14023525, -0.07444264, -0.1849662, -0.059112173, 0.16300274, -0.036133084, 0.10180214, 0.17811607, 0.060199548, -0.08484593, 0.20976141, 0.034547772, -0.025283258, -0.14635645, 0.12902653, -0.018389342, 0.02930079, -0.07605307, -0.17744158, 0.08560228, 0.119017236, -0.2879313, -0.0035180417, 0.27753654, -0.010992311, -0.023385588, 0.011188595, 0.12607634, -0.12734143, 0.08428793, 0.2005165, -0.22067447, -0.061248124, -0.055719975, 0.005148908, 0.24994491, -0.0125519065, -0.21765757, 0.12569927, 0.19547848, 0.037906118, -0.03081316, -0.037251294, 0.40632996, -0.015578427, -0.07997878, 0.056353427, -0.006487581, -0.08050992, 0.3741599, -0.15383314, -0.031233696, 0.14652227, -0.06583692, 0.0581382, -0.37513378, 0.09311765, 0.33113396, -0.30661023, 0.17124858, 0.49571586, -0.1806382, -0.0408787, -0.13440268, -0.021001715, -0.20064077, 0.107431166, 0.34035248, -0.24784362, -0.04191625, -0.07980872, 0.07115878, 0.08459825, 0.04597376, 0.09507102, 0.09110597, -0.04084859, 0.25608367, 0.054579522, 0.1823718, -0.06076245, 0.8716479, -0.20136724, 0.13810886, -1.157743, -0.24540877, -0.028796917, -0.06221387, -0.61517686, 0.25591296, 0.5357151, -0.19449402, -0.13981597, -0.12595621, -0.24854243, 0.25633943, 0.14027907, -1.0456315, 0.28092718, -0.22454666, -0.36121824, -0.41505343, -0.061944287, 0.08406871, 0.061865147, 0.15335959, -0.27716526, -0.02679388, -0.008039351, 0.19231471, -0.34739712, -0.006311946, -0.12161972, 0.034721814, 0.0031801465, 0.020503383, -0.14349806, -0.19167745, -0.009078699, -0.02942536, -0.13652904, 0.12514412, -0.03736025, -0.19843192, 0.1805413, -0.023726337, 0.27061203, -0.09607328, -0.020701287, 0.3046745, 0.12867282, -0.06058668, -0.3474275, 0.22186361, 0.061134063, -0.03589693, 0.11627935, -0.1826807, 0.14002125, -0.18367903, -0.034836303, 0.1787674, 0.33416927, 0.08679189, -0.11710917, -0.105764806, 0.07750505, -0.012350406, 0.0019977465, 0.06351489, -0.15003617, 0.22187857, -0.12430878, 0.1444833, 0.18283075, -0.08065355, -0.05155954, 0.023208642, -0.051582865, 0.14736402, 0.16060773, -0.016778644, 0.047418293, 0.049163308, -0.06257008, 0.23069866, -0.100878105, 0.22347465, 0.0061960593, 0.023137342, 0.12523463, 0.12446582, -0.04649599, 0.101032406, 0.17755006, 0.04718325, -0.057385463, -0.28147343, 0.017701108, 0.2288866, -0.029975155, -0.03951408, -0.16289634, -0.3252759, 0.24829423, 0.39867473, -0.30737847, -0.1134682, 0.49620384, -0.11869434, -0.3857106, -0.29362267, 0.20466916, 0.2267332, 0.24759927, 0.049421106, 0.037677653, 0.23461455, -0.16588768, 0.16607067, -0.022457566, 0.17041951, -0.06974417, -0.09358375, 0.17534979, 0.21893845, 0.18215007, 0.26331893, -0.14833632, -0.067547865, -0.039293893, 0.22942115, -0.657565, -0.31143677, -0.034156606, 0.40119308, -0.3689219, -0.35119915, -0.109782554, -0.9626973, 0.05992652, 0.036140252, 0.06311775, 0.514854, 0.13237771, 0.15610583, -0.54602706, -0.6091174, -0.15668078, -0.6280213, -0.22569105, -0.35024932, -0.07434252, -0.10677246, 0.46468917, 0.12902448, -0.34077582, -1.0537419, -0.32183564, 0.22684786, 0.065294646, 0.023442876, 0.056229915, -0.10895465, 0.17394479, 0.09863431, -0.12274983, 0.07329072, -0.0029476376, 0.23278038, -0.020766145, 0.11010156, 0.112816796, 0.19831263, 0.01573645, 0.16537969, -0.05525066, -0.003068826, 0.05782181, 0.081163436, -0.006467006, 0.11669334, 0.069216155, 0.23610175, -0.09808064, 0.13005172, 0.022331718, -0.09394252, 0.14512281, 0.14491585, 0.22071342, -0.0053474447, 0.17226367, 0.06359056, -0.01034805, -0.021298986, 0.09527482, -0.021916747, 0.076352574, 0.12384046, -0.08730447, 0.21179275, 0.20210466, 0.1677134, 0.20032078, -0.03806625, 0.062100727, -0.09349196, 0.041985106, 0.058239356, 0.17045434, 0.0728976, 0.0015602754, 0.29299736, -0.0023760877, -0.07289299, -0.120884314, 0.012060693, 0.021976048, -0.13524552, 0.09653376, -0.076400615, 0.076213844, 0.18312362, -0.11289966, 0.07985207, -0.25905663, 0.007618513, 0.15677315, -0.23506027, -0.009040745, 0.06192659, -0.3710727, -0.06563228, 0.32640603, -0.15950084, 0.16814172, -0.7096269, -0.1125946, -0.0813672, 0.073175184, 0.27308193, 0.13158178, 0.042142574, 0.052363843, 0.0646745, 0.056738574, -0.15006252, 0.18227421, 0.0036742568, 0.059159916, 0.044403438, -0.24673748, 0.08419839, 0.24083963, 0.21485655, -0.01919253, 0.2641462, -0.08631549, -0.019626316, 0.00014115649, -0.40709233, 0.028072203, 0.30959427, -0.27073297, 0.077956416, 0.23199055, -0.12193605, -0.007123704, 0.17646699, -0.21443051, 0.07520458, 0.11624816, -0.8005356, -0.040949725, -0.46199787, -0.5251467, -0.20205031, -0.14304277, -0.1046592, -0.8690619, 0.43172622, -0.20879677, -0.44297278, -0.25418675, -0.2545227, 0.36520466, -0.2893662, 0.07275051, -0.07060501, -0.04038151, 0.13106874, 0.26968873, -0.08827514, 0.016044222, 0.09347582, 0.1167663, 0.0683291, -0.07551253, -0.0014119131, 0.003269159, 0.026515028, -0.139753, 0.019988958, -0.07108509, -0.086769804, 0.14275147, 0.00042805352, 0.12639344, 0.05377614, -0.02224565, 0.13053218, 0.17634133, -0.13132893, -0.020294074, -0.1348876, 0.06340578, 0.22883065, -0.10866502, 0.17405264, 0.008658915, 0.021636812, -0.14505365, -0.17254387, 0.13179336, 0.015450142, -0.09910999, 0.20141414, -0.08058117, -0.043468274, 0.016971901, 0.20602837, 0.04612182, 0.019800002, -0.08937464, 0.11563043, -0.016474888, 0.12381215, 0.042225353, -0.08638131, -0.09073472, 0.14115448, -0.107631154, -0.010952476, 0.19480637, 0.090620875, -0.041264296, 0.2710982, 0.18596637, -0.0100949975, -0.039569516, 0.14593422, -0.06044388, 0.29796845, -0.13005103, -0.08746742, -0.010933222, -0.16960381, -0.14512508, 0.23336929, -0.16473612, 0.14305423, -0.071414284, -0.14095737, 0.28990084, -0.12361811, -0.42688817, 0.07671256, 0.10489668, 0.0844548, -0.057414927, 0.22473207, -0.012830846, 0.044481892, 0.036295645, -0.37635756, 0.10363398, 0.054949626, 0.121615835, -0.04576549, -0.1554687, -0.010173432, -0.13914579, 0.15833256, -0.13895114, 0.024364064, 0.013960962, -0.37715027, -0.17331216, 0.004180358, 0.039752714, 0.22258663, -0.34960157, 0.20659299, 0.14854793, -0.6558723, 0.2869041, 0.1277124, -0.089417435, -0.14399822, 0.20832181, -0.7638374, -0.12600878, -0.22269185, -0.17237286, -0.108501114, 0.026824126, -0.16669539, 0.22301953, 0.1285396, -0.20776282, -0.21026659, 0.054199904, 0.16820326, -0.2354172, -0.03332961, 0.11759961, 0.08434585, -0.06764763, 0.12545188, 0.01481373, -0.093014866, -0.087499775, 0.106116205, 0.013073397, -0.025098464, 0.16251247, -0.09352088, 0.080246955, 0.20511493, 0.02130438, 0.19685815, -0.04602727, 0.1987947, 0.0074491343, 0.2935757, -0.12003063, -0.065816365, -0.13931513, 0.031826653, 0.027663713, 0.00219849, 0.14752671, 0.046315525, 0.18624534, -0.03857527, 0.004446013, -0.011450874, -0.026733996, 0.1259094, 0.089099206, 0.28932068, 0.1441753, 0.05030407, 0.061092958, -0.18076137, -0.08141377, -0.26860234, 0.013529356, -0.11337889, 0.0588921, 0.12070376, -0.040340815, 0.16964462, 0.053991117, 0.071514264, -0.1595798, 0.034152836, 0.069490366, 0.17902258, -0.097233616, -0.1476732, -0.08595112, -0.08675167, 0.25471655, 0.13827877, 0.05101815, -0.11002954, 0.08640012, 0.09513588, 0.101872995, -0.41064858, -0.05194309, -0.09921993, 0.034084525, -0.117236115, -0.14718698, 0.27651465, -0.052373953, 0.21552612, -0.35699975, -0.16016905, -0.05622671, 0.2957447, -0.5807855, 0.058459733, -0.20532419, 0.12030035, 0.16293196, 0.3736235, -0.10459246, -0.11762487, 0.100221634, -0.27446684, 0.05469354, -0.1943071, -0.047865342, 0.081488304, 0.1075643, 0.094255626, 0.11629631, 0.051498957, -0.2290949, -0.2523289, -0.0662108, 0.013579913, -0.8649277, -0.10009419, -0.19816509, 0.47942665, 0.19759777, -0.14346136, -0.31642357, -0.6869076, 0.07948646, 0.20679553, -0.023994688, 0.21101788, -0.008923772, -0.27245507, -0.34807247, 0.11058707, -0.09597112, -0.10815471, -0.10413554, -0.53293884, -0.38684526, 0.32963666, 0.12836182, 0.16674115, 0.060362037, -0.7834907, -0.36785042, -0.50205135, 0.10813803, -0.089771844, 0.27451077, 0.114022106, -0.096333936, 0.051422305, -0.118852325, 0.4009886, 0.0023803723, 0.38273343, -0.13626428, 0.04726009, -0.11862998, 0.08003174, 0.07133758, 0.07957042, -0.080125034, 0.07519295, 0.26163962, 0.3036734, -0.027457006, 0.18104653, -0.08697355, 0.14120057, 0.15650886, 0.26295868, -0.13042663, 0.13633135, -0.050946396, 0.17438914, 0.012921432, 0.043639038, -0.06426821, 0.020165322, 0.19091356, 0.11338748, -0.10890083, 0.2246039, -0.04632095, 0.04036574, 0.00076844776, 0.37031883, 0.044733483, 0.18954234, 0.031089785, 0.06373558, 0.26954573, -0.04637364, 0.030532274, 0.14109232, 0.02585614, -0.061095472, -0.064045765, -0.028465785, 0.043776687, 0.23386854, 0.2240995, 0.34154686, -0.062106807, -0.005350619, 0.105454706, 0.063996024, 0.3211878, 0.23034427, -0.08932187, -0.29949778, -0.2975784, 0.09894498, -0.37593606, -0.15723895, 0.10090351, 0.26031724, -0.5243349, 0.25734168, 0.1631529, 0.2724942, 0.2864669, -0.508894, -0.036637563, -0.44194907, 0.21984813, 0.20931853, 0.033394355, -0.1326727, 0.06619527, -0.029585691, -0.010421869, 0.124267675, 0.044624913, 0.25756174, 0.27589262, 0.11997726, 0.19773102, 0.054485314, 0.20107993, 0.1827724, -0.0546871, -0.038256522, -0.07597562, 0.43434328, -0.11324829, -0.32682335, -0.049486578, -0.038078617, -0.33005863, -0.30748773, -0.41077706, -0.22598651, -0.16263993, -0.15830597, -0.38649058, -0.60723454, -0.065292515, -0.6147865, 0.28290874, -0.20608105, -0.13964228, -0.3405582, 0.074701175, -0.27947754, -0.40349334, -0.019436583, -0.43888745, 0.1852966, 0.10596047, -0.54954416, 0.042567164, -0.7657287, -0.09060865, -0.013288953, 0.015335617, 0.18817379, 0.112130314, -0.0859775, -0.00063039974, 0.074372455, 0.055153955, 0.09522347, 0.03521048, 0.16588034, -0.18375309, 0.14518844, -0.22501417, -0.06113957, -0.020854766, 0.0722392, 0.15962626, 0.08321277, -0.022458866, 0.12664025, 0.13296764, 0.04625794, 0.05179064, 0.25920248, 0.044745903, -0.19211976, -0.15217273, -0.05322309, -0.17720406, 0.14568995, -0.04180046, 0.024592098, 0.19961499, 0.11812095, -0.07984105, 0.17535965, -0.10153697, -0.054426316, 0.15909208, 0.1527499, 0.21791084, 0.17313144, -0.24220295, -0.0030198158, -0.1849555, 0.0813253, 0.077942275, 0.06462761, 0.07186967, 0.09415277, -0.0031141983, 0.0006623212, -0.04834142, -0.12437032, -0.051285867, 0.00330789, 0.11714621, -0.0018042518, 0.033133853, -0.07684191, -0.22822767, 0.05233836, -0.12303807, -0.28455228, 0.07131084, 0.20783763, 0.05125633, -0.26769227, -0.19241688, 0.26112807, -0.33192277, 0.22641753, -0.081047304, 0.18584748, -0.21150477, 0.081785366, -0.2562189, -0.5107152, 0.32891822, 0.1403193, 0.20453086, -0.11025653, -0.14604104, -0.07914619, -0.12666525, 0.2599695, -0.0054990095, -0.17452474, 0.40248042, 0.22658215, 0.3107893, 0.07082597, -0.08445501, 0.08430722, 0.04586169, 0.1911925, 0.040658962, 0.29414514, 0.016002733, -0.049260847, -0.16816914, -0.05543787, -0.006604122, -0.123723485, -0.3964382, -0.21753867, -0.185798, 0.29335478, -0.25717482, -0.3122706, -0.06953693, -0.70418566, 0.38832673, -0.9069133, -0.50946206, 0.2253955, -0.09168075, -0.1393486, -0.022279222, -0.17414579, 0.074971214, -0.16353036, -0.5557913, -0.09819235, -0.071052164, -0.3841837, 0.14659661, 0.23589928, 0.034424067, 0.22797213, -0.011265556, 0.10937343, -0.10078983, 0.119415, -0.077898815, -0.067339234, -0.0998405, 0.033616282, 0.14757203, -0.12887026, 0.00930596, -0.039953634, 0.050804365, 0.039658032, -0.063278735, 0.20617217, 0.02156236, 0.06525568, -0.056757208, -0.124105655, 0.123172864, 0.05301667, -0.016841026, -0.038105085, 0.1292416, -0.081499584, 0.099797614, 0.17206994, -0.2771617, 0.08953791, 0.1566222, -0.05327974, 0.118276976, 0.20159777, 0.04586759, 0.024631228, 0.03419113, 0.03663372, 0.17486459, 0.17369375, 0.016023375, -0.06475372, 0.1452428, 0.064978555, -0.21628097, -0.07815331, 0.18032667, 0.1737718, -0.028466234, 0.045435093, 0.078634426, 0.35134256, 0.008478082, 0.12199186, -0.007991472, 0.053333856, 0.10189031, 0.14379855, 0.050734483, 0.12338852, -0.17144497, 0.44425344, 0.17737544, -0.34526, 0.14594322, 0.026168764, -0.007229005, 0.12531228, 0.100826286, 0.24638604, -0.022745972, 0.22021566, 0.25660095, -0.021076923, -0.31270722, -0.1402696, 0.1661139, 0.023355994, 0.30093867, 0.1408146, -0.1718823, -0.1293752, 0.08218476, 0.4556737, -0.18638279, -0.6534115, -0.1104529, 0.33260775, 0.017637951, 0.14156525, 0.21735033, 0.13109033, -0.12645315, 0.27584583, 0.15453435, -0.21978627, -0.25712818, 0.33632272, 0.0020600467, 0.030095197, 0.21138903, -0.5643656, 0.026972322, -0.03860609, -0.43760535, -0.1689741, 0.25046954, 0.20682219, 0.09072232 };
static const float conv3_biases[] = { -0.0863891, 0.10438933, 0.06472289, -0.14314318, -0.027129069, -0.034794275, -0.24742387, 0.15880923, -0.09856567, -0.05455537, -0.0022555168, -0.013626123, 0.085271485, 0.1737873, 0.020551283, -0.056259274 };

// Final Dense layer weights [16,10] and biases [10]
static const float dense_weights[] = { -0.36564922, -0.48838463, 0.47427693, 0.19524358, 0.4130521, -0.13725428, -0.7138841, 0.16002643, 0.31070337, -0.1139837, 0.52861714, 0.48909742, 0.20888798, -0.52484834, 0.27320072, -0.17788097, 0.6111342, -0.34230012, -0.2620631, -0.27726272, -0.028523913, -0.64992726, -0.36728433, 0.06134523, 0.48542523, -0.12046517, 0.44755185, -0.22354712, 0.044024747, 0.6468633, 0.38313946, 0.3368668, 0.23203713, 0.33900887, -0.27347678, -0.7292207, -0.31941426, 0.42143017, -0.23055054, 0.13018169, 0.16476417, 0.20926975, 0.48089662, -0.33240896, 0.6627497, 0.25701922, 0.58397824, -0.17388186, -0.30596757, -0.23214556, 0.38130796, -0.05567868, -0.38350785, -0.42934257, 0.3444872, -0.29463854, -0.20144707, -0.0036016942, 0.41607377, 0.38203114, 0.30213463, -0.52427036, 0.20873533, 0.5455598, -0.5623985, 0.44191337, 0.32096925, -0.6717576, 0.09080726, -0.40152454, 0.3586121, 0.2526267, -0.38540763, -0.9358612, 0.24328917, 0.54196835, 0.108605355, -0.070653, 0.048445005, 0.3592293, -0.63192606, 0.37349024, -0.35263595, 0.22111128, -0.35471153, 0.407405, -0.26284692, -0.14828329, -0.003831925, 0.089566775, 0.03656258, 0.0169622, 0.1535267, -0.021691155, -0.15279147, -0.11269979, -0.9191484, 0.24528411, -0.42384416, 0.036604222, -0.23206256, 0.46178713, 0.3131605, 0.07289635, 0.61523896, -0.2508364, 0.23423004, 0.08829529, -0.31162238, -0.4438906, -0.051130448, -0.72608906, -0.056721848, -0.14972621, -0.43459886, -0.009876609, -0.41002327, 0.6263798, -0.12355319, -0.07487567, -0.2594395, 0.05676621, -0.6004096, -0.31253466, -0.2243551, -0.16552372, 0.12866719, -0.09138374, 0.64021784, -0.017511034, 0.37545478, 0.4076982, -0.4327821, -0.1524028, 0.22703843, -0.18391022, -0.3546218, 0.18661016, -0.061367784, 0.28138277, 0.1488953, 0.39324072, 0.46749863, -0.061548498, -0.52014077, -0.47622266, 0.18927541, 0.46758506, 0.25450125, -0.24109507, 0.05255384, 0.08553399, 0.38075623, -0.53888243, 0.1726891, 0.3777274, 0.31980136, -0.19261366, -0.43920937, -0.05231113 };
static const float dense_biases[] = { 0.020963935, 0.049623795, -0.00093193154, -0.06130683, 0.023707075, -0.18247803, -0.02210379, 0.05609013, -0.038615897, 0.18046367 };

// ---------------------------------------------------------------
// Tensor operations (optimized for microcontrollers)
// ---------------------------------------------------------------
void conv2d(const float* input, const float* weights, const float* bias,
    int in_w, int in_h, int in_c,
    int k_size, int out_c,
    int stride, float* output) {
    int out_w = (in_w - k_size) / stride + 1;

    for (int oc = 0; oc < out_c; oc++) {
        for (int y = 0; y < out_w; y++) {
            for (int x = 0; x < out_w; x++) {
                float sum = bias[oc];

                for (int ic = 0; ic < in_c; ic++) {
                    for (int ky = 0; ky < k_size; ky++) {
                        for (int kx = 0; kx < k_size; kx++) {
                            int in_pos = ((y * stride + ky) * in_w + (x * stride + kx)) * in_c + ic;
                            int w_pos = ((ky * k_size + kx) * in_c + ic) * out_c + oc;
                            sum += input[in_pos] * weights[w_pos];
                        }
                    }
                }
                output[(y * out_w + x) * out_c + oc] = sum > 0 ? sum : 0; // ReLU
            }
        }
    }
}

void maxpool2d(const float* input, int in_size, int channels,
    int pool_size, float* output) {
    int out_size = in_size / pool_size;

    for (int c = 0; c < channels; c++) {
        for (int y = 0; y < out_size; y++) {
            for (int x = 0; x < out_size; x++) {
                float max_val = -INFINITY;

                for (int py = 0; py < pool_size; py++) {
                    for (int px = 0; px < pool_size; px++) {
                        int pos = ((y * pool_size + py) * in_size + (x * pool_size + px)) * channels + c;
                        if (input[pos] > max_val) max_val = input[pos];
                    }
                }
                output[(y * out_size + x) * channels + c] = max_val;
            }
        }
    }
}

// ---------------------------------------------------------------
// Inference pipeline
// ---------------------------------------------------------------
float* mnist_inference(const float* input) {
    // Allocate memory buffers (adjust sizes according to your architecture)
    static float buf1[26 * 26 * 4];  // First conv output
    static float buf2[13 * 13 * 4];  // After first maxpool

    static float buf3[12 * 12 * 8];  // Second conv output
    static float buf4[6 * 6 * 8];  // After second maxpool

    static float buf5[4 * 4 * 16];  // Third conv output
    static float buf_global_pool[16];  //After global maxpool
    // ... Add more buffers for intermediate results ...
    static float final_output[10];  // Final classification result

    // Layer 1: Conv2D 4 filters
    conv2d(input, conv1_weights, conv1_biases,
        28, 28, 1,
        3, 4, 1, buf1);

    // Layer 2: MaxPool2D
    maxpool2d(buf1, 26, 4, 2, buf2);

    // Layer 3: Conv2D 8 filters
    conv2d(buf2, conv2_weights, conv2_biases,
        13, 13, 4,
        2, 8, 1, buf3);

    // Layer 4: MaxPool2D
    maxpool2d(buf3, 12, 8, 2, buf4);

    // Layer 5: Conv2D 8 filters
    conv2d(buf4, conv3_weights, conv3_biases,
        6, 6, 8,
        3, 16, 1, buf5);

    // Global Max Pooling (2x2 -> 1x1)
    for (int c = 0; c < 16; c++) {
        float max_val = -INFINITY;
        for (int y = 0; y < 4; y++) {
            for (int x = 0; x < 4; x++) {
                // Calculate position in HWC format
                int pos = (y * 4 + x) * 16 + c;
                if (buf5[pos] > max_val) {
                    max_val = buf5[pos];
                }
            }
        }
        buf_global_pool[c] = max_val;
    }


    // Final dense layer (simplified)
    for (int i = 0; i < 10; i++) {
        final_output[i] = dense_biases[i];
        for (int j = 0; j < 16; j++) {
            final_output[i] += buf_global_pool[j] * dense_weights[j * 10 + i];
        }
    }

    return final_output;
}

// ---------------------------------------------------------------
// Example usage
// ---------------------------------------------------------------
int main() {
    // Load your 28x28 input image (normalized 0-1)
    float input[28 * 28] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 18, 18, 18, 126, 136, 175, 26, 166, 255, 247, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 36, 94, 154, 170, 253, 253, 253, 253, 253, 225, 172, 253, 242, 195, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 238, 253, 253, 253, 253, 253, 253, 253, 253, 251, 93, 82, 82, 56, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 219, 253, 253, 253, 253, 253, 198, 182, 247, 241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 156, 107, 253, 253, 205, 11, 0, 43, 154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 1, 154, 253, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139, 253, 190, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 190, 253, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 241, 225, 160, 108, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 240, 253, 253, 119, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 186, 253, 253, 150, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 93, 252, 253, 187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 249, 253, 249, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 130, 183, 253, 253, 207, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 148, 229, 253, 253, 253, 250, 182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 114, 221, 253, 253, 253, 253, 201, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 66, 213, 253, 253, 253, 253, 198, 81, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 171, 219, 253, 253, 253, 253, 195, 80, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 172, 226, 253, 253, 253, 253, 244, 133, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 253, 253, 253, 212, 135, 132, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

    // Run inference
    float* output = mnist_inference(input);

    // Get predicted class
    int pred_class = 0;
    for (int i = 1; i < 10; i++) {
        printf("%f, ", output[i]);
        if (output[i] > output[pred_class]) pred_class = i;
    }
    printf("Predicted digit: %d\n", pred_class);
    
}

